name: Composer CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

jobs:
  ci:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: Composer

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node Version
        uses: actions/setup-node@v1
        with:
          node-version: 12.13.0
      # - name: Restore yarn cache
      #   uses: actions/cache@preview
      #   with:
      #     path: ~/.cache/yarn
      #     key: ${{ runner.os }}-yarn-new-${{ hashFiles(format('{0}{1}', github.workspace, '/Composer/yarn.lock')) }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-new-
      - name: yarn install
        run: yarn
      - name: yarn build:dev
        run: yarn build:dev
      - name: yarn lint
        run: yarn lint
      - name: yarn test:coverage
        run: yarn test:coverage
      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.1
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./Composer/coverage/lcov.info
          base-path: ./Composer

  botproject:
    name: BotProject-dotnet
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Dotnet Version
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.102" # SDK Version to use.
      - name: dotnet build
        run: dotnet build
        working-directory: runtime/dotnet
      - name: dotnet test
        run: dotnet test
        working-directory: runtime/dotnet/tests

  nodejs:
    name: BotProject-nodejs
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node Version
        uses: actions/setup-node@v1
        with:
          node-version: 12.13.0
      - name: npm install
        run: npm install
        working-directory: runtime/node
      - name: npm build
        run: npm run build
        working-directory: runtime/node
      - name: npm test
        run: npm run test
        working-directory: runtime/node
  # docker-build:
  #   name: Docker Build
  #   timeout-minutes: 20
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: docker-compose build
  #       run: docker-compose build
  #     - name: Health check
  #       run: |
  #         docker-compose up -d
  #         sleep 10
  #         curl -Is http://localhost:3000 | grep -q "200 OK"
  #       shell: bash
  #     - name: Cleanup
  #       if: always()
  #       run: docker-compose down
