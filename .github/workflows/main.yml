name: Composer CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - master
      - stable
  schedule:
    - cron: "0 0 * * *"

jobs:
  ci:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node Version
        uses: actions/setup-node@v1
        with:
          node-version: 12.13.0
      - name: Restore yarn cache
        uses: actions/cache@preview
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}{1}', github.workspace, '/Composer/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        run: yarn
        working-directory: Composer
      - name: yarn build:dev
        run: yarn build:dev
        working-directory: Composer
      - name: yarn lint
        run: yarn lint
        working-directory: Composer
      - name: yarn test:coverage
        run: yarn test:coverage
        working-directory: Composer
      - name: Coveralls
        uses: coverallsapp/github-action@master
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./Composer/coverage/lcov.info
          base-path: ./Composer

  botproject:
    name: BotProject
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Dotnet Version
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.102" # SDK Version to use.
      - name: dotnet build
        run: dotnet build
        working-directory: runtime/dotnet
      - name: dotnet test
        run: dotnet test
        working-directory: runtime/dotnet/tests

  docker-build:
    name: Docker Build
    timeout-minutes: 20
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: docker-compose build
        run: docker-compose build
      - name: Health check
        run: |
          docker-compose up -d
          sleep 10
          curl -Is http://localhost:3000 | grep -q "200 OK"
        shell: bash
      - name: Cleanup
        if: always()
        run: docker-compose down
