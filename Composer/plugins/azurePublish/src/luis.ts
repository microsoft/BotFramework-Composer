// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import * as path from 'path';

import * as fs from 'fs-extra';
import * as rp from 'request-promise';

import { BotProjectDeployLoggerType } from './botProjectLoggerType';

const { promisify } = require('util');

const luBuild = require('@microsoft/bf-lu/lib/parser/lubuild/builder.js');
const readdir = promisify(fs.readdir);

export interface LuisPublishConfig {
  // Logger
  logger: (string) => any;
  [key: string]: any;
}

export class LuisPublish {
  private logger: (string) => any;

  constructor(config: LuisPublishConfig) {
    this.logger = config.logger;
  }

  /*******************************************************************************************************************************/
  /* This section has to do with publishing LU files to LUIS
  /*******************************************************************************************************************************/

  /**
   * return an array of all the files in a given directory
   * @param dir
   */
  private async getFiles(dir: string): Promise<string[]> {
    const dirents = await readdir(dir, { withFileTypes: true });
    const files = await Promise.all(
      dirents.map((dirent) => {
        const res = path.resolve(dir, dirent.name);
        return dirent.isDirectory() ? this.getFiles(res) : res;
      })
    );
    return Array.prototype.concat(...files);
  }

  private notEmptyLuisModel(file: string) {
    return fs.readFileSync(file).length > 0;
  }

  /**
   * Helper function to get the appropriate account out of a list of accounts
   * @param accounts
   * @param filter
   */
  private getAccount(accounts: any, filter: string) {
    for (const account of accounts) {
      if (account.AccountName === filter) {
        return account;
      }
    }
  }

  // Run through the lubuild process
  // This happens in the build folder, NOT in the original source folder
  public async publishLuis(
    workingFolder: string,
    name: string,
    environment: string,
    accessToken: string,
    language: string,
    luisEndpoint: string,
    luisAuthoringEndpoint: string,
    luisEndpointKey: string,
    luisAuthoringKey?: string,
    luisAuthoringRegion?: string,
    luisResource?: string
  ) {
    if (luisAuthoringKey && luisAuthoringRegion) {
      // Get a list of all the .lu files that are not empty
      const botFiles = await this.getFiles(workingFolder);
      const modelFiles = botFiles.filter((name) => {
        return name.endsWith('.lu') && this.notEmptyLuisModel(name);
      });

      // Identify the generated folder
      const generatedFolder = path.join(workingFolder, 'ComposerDialogs/generated');

      // Identify the deployment settings file
      const deploymentSettingsPath = path.join(workingFolder, 'appsettings.deployment.json');

      // Ensure the generated folder exists
      if (!(await fs.pathExists(generatedFolder))) {
        await fs.mkdir(generatedFolder);
      }

      // Instantiate the LuBuild object from the LU parsing library
      // This object is responsible for parsing the LU files and sending them to LUIS
      const builder = new luBuild.Builder((msg) =>
        this.logger({
          status: BotProjectDeployLoggerType.DEPLOY_INFO,
          message: msg,
        })
      );

      // Pass in the list of the non-empty LU files we got above...
      const loadResult = await builder.loadContents(
        modelFiles,
        language || '',
        environment || '',
        luisAuthoringRegion || ''
      );

      // set the default endpoint
      if (!luisEndpoint) {
        luisEndpoint = `https://${luisAuthoringRegion}.api.cognitive.microsoft.com`;
      }

      // if not specified, set the authoring endpoint
      if (!luisAuthoringEndpoint) {
        luisAuthoringEndpoint = luisEndpoint;
      }

      // Perform the Lubuild process
      // This will create new luis apps for each of the luis models represented in the LU files
      const buildResult = await builder.build(
        loadResult.luContents,
        loadResult.recognizers,
        luisAuthoringKey,
        luisAuthoringEndpoint,
        name,
        environment,
        language,
        false,
        loadResult.multiRecognizers,
        loadResult.settings
      );

      // Write the generated files to the generated folder
      await builder.writeDialogAssets(buildResult, true, generatedFolder);

      this.logger({
        status: BotProjectDeployLoggerType.DEPLOY_INFO,
        message: `lubuild succeed`,
      });

      // Find any files that contain the name 'luis.settings' in them
      // These are generated by the LuBuild process and placed in the generated folder
      // These contain dialog-to-luis app id mapping
      const luisConfigFiles = (await this.getFiles(workingFolder)).filter((filename) =>
        filename.includes('luis.settings')
      );
      const luisAppIds: any = {};

      // Read in all the luis app id mappings
      for (const luisConfigFile of luisConfigFiles) {
        const luisSettings = await fs.readJson(luisConfigFile);
        Object.assign(luisAppIds, luisSettings.luis);
      }

      // Create the base LUIS config object
      // const luisConfig: any = {
      //   endpoint: luisEndpoint,
      //   endpointKey: luisEndpointKey,
      //   authoringRegion: luisAuthoringRegion,
      //   authoringKey: luisAuthoringRegion,
      // };

      // // Copy the app IDs into the base config
      // Object.assign(luisConfig, luisAppIds);

      // // Update deploymentSettings with the luis config
      // // TODO: This should be handled by the runtime plugin - writing to appsettings.deployment.json
      // // But in this case the change here is being written into the build folder, not "original" version
      // const settings: any = await fs.readJson(deploymentSettingsPath);
      // settings.luis = luisConfig;
      // await fs.writeJson(deploymentSettingsPath, settings, {
      //   spaces: 4,
      // });

      // In order for the bot to use the LUIS models, we need to assign a LUIS key to the endpoint of each app
      // First step is to get a list of all the accounts available based on the given luisAuthoringKey.
      let accountList;
      try {
        // Make a call to the azureaccounts api
        // DOCS HERE: https://westus.dev.cognitive.microsoft.com/docs/services/5890b47c39e2bb17b84a55ff/operations/5be313cec181ae720aa2b26c
        // This returns a list of azure account information objects with AzureSubscriptionID, ResourceGroup, AccountName for each.
        const getAccountUri = `${luisEndpoint}/luis/api/v2.0/azureaccounts`;
        const options = {
          headers: { Authorization: `Bearer ${accessToken}`, 'Ocp-Apim-Subscription-Key': luisAuthoringKey },
        } as rp.RequestPromiseOptions;
        const response = await rp.get(getAccountUri, options);

        // this should include an array of account info objects
        accountList = JSON.parse(response);
      } catch (err) {
        // handle the token invalid
        const error = JSON.parse(err.error);
        if (error?.error?.message && error?.error?.message.indexOf('access token expiry') > 0) {
          throw new Error(
            `Type: ${error?.error?.code}, Message: ${error?.error?.message}, run az account get-access-token, then replace the accessToken in your configuration`
          );
        } else {
          throw err;
        }
      }
      // Extract the accoutn object that matches the expected resource name.
      // This is the name that would appear in the azure portal associated with the luis endpoint key.
      const account = this.getAccount(accountList, luisResource ? luisResource : `${name}-${environment}-luis`);

      // Assign the appropriate account to each of the applicable LUIS apps for this bot.
      // DOCS HERE: https://westus.dev.cognitive.microsoft.com/docs/services/5890b47c39e2bb17b84a55ff/operations/5be32228e8473de116325515
      for (const k in luisAppIds) {
        const luisAppId = luisAppIds[k];
        this.logger({
          status: BotProjectDeployLoggerType.DEPLOY_INFO,
          message: `Assigning to luis app id: ${luisAppId}`,
        });

        const luisAssignEndpoint = `${luisEndpoint}/luis/api/v2.0/apps/${luisAppId}/azureaccounts`;
        const options = {
          body: account,
          json: true,
          headers: { Authorization: `Bearer ${accessToken}`, 'Ocp-Apim-Subscription-Key': luisAuthoringKey },
        } as rp.RequestPromiseOptions;
        const response = await rp.post(luisAssignEndpoint, options);

        // TODO: Add some error handling on this API call. As it is, errors will just throw by default and be caught by the catch all try/catch in the deploy method

        this.logger({
          status: BotProjectDeployLoggerType.DEPLOY_INFO,
          message: response,
        });
      }

      // The process has now completed.
      this.logger({
        status: BotProjectDeployLoggerType.DEPLOY_INFO,
        message: 'Luis Publish Success! ...',
      });

      // return the new settings that need to be added to the main settings file.
      return luisAppIds;
    }
  }
}
