# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
  - job: test
    displayName: Unit Tests
    pool:
      name: Hosted macOS
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 10.15.3'
      inputs:
        versionSpec: 10.15.3
    - script: cd Composer && yarn install --network-concurrency 1
      displayName: 'yarn install'
    - script: cd Composer && yarn lint
      displayName: 'yarn lint'
    - script: cd Composer && yarn test:coverage
      displayName: 'yarn test:coverage'
      condition: succeededOrFailed()
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage from Composer/coverage/cobertura-coverage.xml'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'Composer/coverage/cobertura-coverage.xml'
        reportDirectory: 'Composer/coverage/lcov-report'
    - task: PublishTestResults@2
      displayName: Publish Unit Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
  - job: e2e
    displayName: E2E Tests
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 10.15.3'
      inputs:
        versionSpec: 10.15.3
    - script: cd Composer && yarn install --network-concurrency 1
      displayName: 'yarn install'
    - script: cd Composer && yarn && yarn build
      displayName: 'yarn build'
    - script: cd Composer && yarn test:integration
      displayName: yarn test:integration
    - task: PublishTestResults@2
      displayName: Publish E2E Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/cypress/results/results-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
