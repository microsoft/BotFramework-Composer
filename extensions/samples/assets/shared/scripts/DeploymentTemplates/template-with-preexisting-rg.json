{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "appId": {
      "type": "string",
      "metadata": {
        "description": "Active Directory App ID, set as MicrosoftAppId in the Web App's Application Settings."
      }
    },
    "appSecret": {
      "type": "string",
      "metadata": {
        "description": "Active Directory App Password, set as MicrosoftAppPassword in the Web App's Application Settings. Defaults to \"\"."
      }
    },
    "useCosmosDb": {
      "type": "bool",
      "defaultValue": true
    },
    "useAppInsights": {
      "type": "bool",
      "defaultValue": true
    },
    "shouldCreateAuthoringResource": {
      "type": "bool",
      "defaultValue": true
    },
    "shouldCreateLuisResource": {
      "type": "bool",
      "defaultValue": true
    },
    "cosmosDbName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "botId": {
      "type": "string",
      "metadata": {
        "description": "The globally unique and immutable bot ID. Also used to configure the displayName of the bot, which is mutable."
      }
    },
    "botSku": {
      "defaultValue": "F0",
      "type": "string",
      "metadata": {
        "description": "The pricing tier of the Bot Service Registration. Acceptable values are F0 and S1."
      }
    },
    "luisAuthoringKey": {
      "type": "string",
      "defaultValue": ""
    },
    "newAppServicePlanName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the new App Service Plan."
      }
    },
    "newAppServicePlanSku": {
      "type": "object",
      "defaultValue": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 1
      },
      "metadata": {
        "description": "The SKU of the App Service Plan. Defaults to Standard values."
      }
    },
    "appServicePlanLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of the App Service Plan."
      }
    },
    "existingAppServicePlan": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the existing App Service Plan used to create the Web App for the bot."
      }
    },
    "newWebAppName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The globally unique name of the Web App. Defaults to the value passed in for \"botId\"."
      }
    },
    "appInsightsName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "appInsightsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "useStorage": {
      "type": "bool",
      "defaultValue": true
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "luisServiceName": {
      "type": "string",
      "defaultValue": "[concat(resourceGroup().name, '-luis')]"
    },
    "luisServiceAuthoringSku": {
      "type": "string",
      "defaultValue": "F0"
    },
    "luisServiceRunTimeSku": {
      "type": "string",
      "defaultValue": "S0"
    },
    "luisServiceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "defaultAppServicePlanName": "[if(empty(parameters('existingAppServicePlan')), 'createNewAppServicePlan', parameters('existingAppServicePlan'))]",
    "useExistingAppServicePlan": "[not(equals(variables('defaultAppServicePlanName'), 'createNewAppServicePlan'))]",
    "servicePlanName": "[if(variables('useExistingAppServicePlan'), parameters('existingAppServicePlan'), parameters('newAppServicePlanName'))]",
    "resourcesLocation": "[parameters('appServicePlanLocation')]",
    "cosmosDbAccountName": "[toLower(take(replace(parameters('cosmosDbName'), '_', ''), 31))]",
    "webAppName": "[if(empty(parameters('newWebAppName')), parameters('botId'), parameters('newWebAppName'))]",
    "siteHost": "[concat(variables('webAppName'), '.azurewebsites.net')]",
    "botEndpoint": "[concat('https://', variables('siteHost'), '/api/messages')]",
    "storageAccountName": "[toLower(take(replace(replace(parameters('storageAccountName'), '-', ''), '_', ''), 24))]",
    "LuisAuthoringAccountName": "[concat(parameters('luisServiceName'), '-Authoring')]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "1d41002f-62a1-49f3-bd43-2f3f32a19cbb",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "comments": "Create a new App Service Plan if no existing App Service Plan name was passed in.",
      "type": "Microsoft.Web/serverfarms",
      "condition": "[not(variables('useExistingAppServicePlan'))]",
      "name": "[variables('servicePlanName')]",
      "apiVersion": "2018-02-01",
      "location": "[variables('resourcesLocation')]",
      "sku": "[parameters('newAppServicePlanSku')]",
      "properties": {
        "name": "[variables('servicePlanName')]"
      }
    },
    {
      "comments": "Create a Web App using an App Service Plan",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2015-08-01",
      "location": "[variables('resourcesLocation')]",
      "kind": "app",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('servicePlanName'))]"
      ],
      "name": "[variables('webAppName')]",
      "properties": {
        "name": "[variables('webAppName')]",
        "serverFarmId": "[variables('servicePlanName')]",
        "siteConfig": {
          "webSocketsEnabled": true,
          "appSettings": [
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "MicrosoftAppId",
              "value": "[parameters('appId')]"
            },
            {
              "name": "MicrosoftAppPassword",
              "value": "[parameters('appSecret')]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "https://botservice.hosting.portal.azure.net",
              "https://hosting.onecloud.azure-test.net/"
            ]
          }
        }
      }
    },
    {
      "comments": "CosmosDB for bot state.",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "GlobalDocumentDB",
      "apiVersion": "2015-04-08",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ]
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2020-03-01",
      "name": "[concat(variables('cosmosDbAccountName'), '/botstate-db')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
      ],
      "properties": {
        "resource": {
          "id": "botstate-db"
        },
        "options": {}
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2020-03-01",
      "name": "[concat(variables('cosmosDbAccountName'), '/botstate-db/botstate-container')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), 'botstate-db')]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
      ],
      "properties": {
        "resource": {
          "id": "botstate-container",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "conflictResolutionPolicy": {
            "mode": "LastWriterWins",
            "conflictResolutionPath": "/_ts"
          }
        },
        "options": {}
      },
      "condition": "[parameters('useCosmosDb')]"
    },
    {
      "apiVersion": "2017-12-01",
      "type": "Microsoft.BotService/botServices",
      "name": "[parameters('botId')]",
      "location": "global",
      "kind": "bot",
      "sku": {
        "name": "[parameters('botSku')]"
      },
      "properties": {
        "name": "[parameters('botId')]",
        "displayName": "[parameters('botId')]",
        "endpoint": "[variables('botEndpoint')]",
        "msaAppId": "[parameters('appId')]",
        "developerAppInsightsApplicationId": null,
        "developerAppInsightKey": null,
        "publishingCredentials": null,
        "storageResourceId": null
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('webAppName'))]"
      ]
    },
    {
      "comments": "app insights",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "apiVersion": "2015-05-01",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('appInsightsLocation')]",
      "properties": {
        "Application_Type": "web"
      },
      "condition": "[parameters('useAppInsights')]"
    },
    {
      "comments": "storage account",
      "type": "Microsoft.Storage/storageAccounts",
      "kind": "StorageV2",
      "apiVersion": "2018-07-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "condition": "[parameters('useStorage')]"
    },
    {
      "comments": "Cognitive service authoring key for all LUIS apps.",
      "apiVersion": "2017-04-18",
      "name": "[variables('LuisAuthoringAccountName')]",
      "location": "[parameters('luisServiceLocation')]",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "LUIS.Authoring",
      "sku": {
        "name": "[parameters('luisServiceAuthoringSku')]"
      },
      "condition": "[parameters('shouldCreateAuthoringResource')]"
    },
    {
      "comments": "Cognitive service endpoint key for all LUIS apps.",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "LUIS",
      "apiVersion": "2017-04-18",
      "name": "[parameters('luisServiceName')]",
      "location": "[parameters('luisServiceLocation')]",
      "sku": {
        "name": "[parameters('luisServiceRunTimeSku')]"
      },
      "condition": "[parameters('shouldCreateLuisResource')]"
    }
  ],
  "outputs": {
    "ApplicationInsights": {
      "type": "object",
      "value": {
        "InstrumentationKey": "[if(parameters('useAppInsights'), reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).InstrumentationKey, '')]"
      }
    },
    "cosmosDb": {
      "type": "object",
      "value": {
        "cosmosDBEndpoint": "[if(parameters('useCosmosDb'), reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))).documentEndpoint, '')]",
        "authKey": "[if(parameters('useCosmosDb'), listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName')), '2015-04-08').primaryMasterKey, '')]",
        "databaseId": "botstate-db",
        "containerId": "botstate-container"
      }
    },
    "blobStorage": {
      "type": "object",
      "value": {
        "connectionString": "[if(parameters('useStorage'), concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2018-07-01').keys[0].value, ';EndpointSuffix=core.windows.net'), '')]",
        "container": "transcripts"
      }
    },
    "luis": {
      "type": "object",
      "value": {
        "endpointKey": "[if(parameters('shouldCreateLuisResource'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('luisServiceName')),'2017-04-18').key1, '')]",
        "authoringKey": "[if(parameters('shouldCreateAuthoringResource'), listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('LuisAuthoringAccountName')),'2017-04-18').key1, parameters('luisAuthoringKey'))]",
        "region": "[parameters('luisServiceLocation')]",
        "endpoint": "[if(parameters('shouldCreateLuisResource'), reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('luisServiceName'))).endpoint, '')]",
        "authoringEndpoint": "[if(parameters('shouldCreateAuthoringResource'), reference(resourceId('Microsoft.CognitiveServices/accounts', variables('LuisAuthoringAccountName'))).endpoint, '')]"
      }
    }
  }
}
